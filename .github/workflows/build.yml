name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libpng-dev zlib1g-dev
          
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "cmake is pre-installed on macOS runners"
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Build libslvs (static)
        run: |
          cd libslvs/SolveSpaceLib
          
          # Clean any previous builds
          rm -rf build-minimal
          mkdir -p build-minimal
          cd build-minimal
          
          # Compiler flags
          CXX="${CXX:-c++}"
          CC="${CC:-cc}"
          CXXFLAGS="-O3 -fPIC -std=c++11 -DLIBRARY -DSTATIC_LIB"
          CFLAGS="-O3 -fPIC"
          INCLUDES="-I../include -I../src -I../extlib/eigen -I../extlib/mimalloc/include"
          
          echo "Building minimal mimalloc..."
          
          # Build minimal mimalloc (just the core)
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/heap.c -o heap.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/alloc.c -o alloc.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/init.c -o init.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/os.c -o os.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/page.c -o page.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/segment.c -o segment.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/arena.c -o arena.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/stats.c -o stats.o
          $CC -c $CFLAGS -I../extlib/mimalloc/include ../extlib/mimalloc/src/options.c -o options.o
          
          echo "Building minimal static libslvs..."
          
          # Compile the core solver files
          $CXX -c $CXXFLAGS $INCLUDES ../src/util.cpp -o util.o
          $CXX -c $CXXFLAGS $INCLUDES ../src/entity.cpp -o entity.o
          $CXX -c $CXXFLAGS $INCLUDES ../src/expr.cpp -o expr.o
          $CXX -c $CXXFLAGS $INCLUDES ../src/constrainteq.cpp -o constrainteq.o
          $CXX -c $CXXFLAGS $INCLUDES ../src/system.cpp -o system.o
          $CXX -c $CXXFLAGS $INCLUDES ../src/platform/platformbase.cpp -o platformbase.o
          
          # Compile the slvs library interface
          $CXX -c $CXXFLAGS $INCLUDES ../src/slvs/lib.cpp -o lib.o
          
          echo "Creating static library..."
          
          # Create the static library including mimalloc
          ar rcs libslvs.a \
              util.o entity.o expr.o constrainteq.o system.o platformbase.o lib.o \
              heap.o alloc.o init.o os.o page.o segment.o arena.o stats.o options.o
          
          # Create the expected directory structure
          mkdir -p ../build/src/slvs
          cp libslvs.a ../build/src/slvs/
          
          echo "Library created:"
          ls -la libslvs.a
          ar -t libslvs.a
          
      - name: Build slvsx (static)
        run: |
          export SLVS_LIB_DIR=$PWD/libslvs/SolveSpaceLib/build/src/slvs
          export SLVS_STATIC=1
          
          # For Linux, link statically against libgcc and libstdc++ but not glibc
          # This creates a portable binary that only depends on glibc
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            export RUSTFLAGS="-C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
            cargo build --release
          else
            # For macOS, use default linking (already mostly static)
            cargo build --release
          fi
          
      - name: Verify static binary
        run: |
          echo "Checking binary dependencies:"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            ldd target/release/slvsx | grep -E "(libstdc|libgcc)" || echo "No libstdc++/libgcc dependencies (good!)"
            echo "Full dependency list:"
            ldd target/release/slvsx
          else
            otool -L target/release/slvsx
          fi
          ls -lh target/release/slvsx*
          file target/release/slvsx
        
      - name: Run tests
        run: cargo test
        
      - name: Test examples
        run: |
          chmod +x test-examples.sh
          ./test-examples.sh || true
          
      - name: Upload static binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: slvsx-static-${{ matrix.os }}
          path: target/release/slvsx*
          
      - name: Upload example SVGs
        uses: actions/upload-artifact@v4
        with:
          name: example-svgs-${{ matrix.os }}
          path: examples/*.svg