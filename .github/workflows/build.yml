name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libpng-dev zlib1g-dev
          
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "cmake is pre-installed on macOS runners"
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Build libslvs (static)
        run: |
          cd libslvs/SolveSpaceLib
          mkdir -p build
          cd build
          # Configure with policy version to avoid CMake errors
          cmake .. -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_POLICY_VERSION_MINIMUM=3.1 \
                   -DBUILD_SHARED_LIBS=OFF \
                   -DENABLE_GUI=OFF \
                   -DENABLE_TESTS=OFF \
                   -DENABLE_OPENGL=OFF || echo "Full build failed, trying minimal build..."
          
          # Build only the slvs target
          make slvs_static -j$(nproc 2>/dev/null || sysctl -n hw.ncpu) || make slvs -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          
          # Find and display all static libraries
          find . -name "*.a" -ls
          
      - name: Build slvsx (static)
        run: |
          export SLVS_LIB_DIR=$PWD/libslvs/SolveSpaceLib/build/src/slvs
          export SLVS_STATIC=1
          # Use appropriate static linking flags for each OS
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            export RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
          else
            export RUSTFLAGS="-C target-feature=+crt-static"
          fi
          cargo build --release --target-dir target-static
          
      - name: Verify static binary
        run: |
          echo "Checking binary dependencies:"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            ldd target-static/release/slvsx || echo "No dynamic dependencies (good!)"
          else
            otool -L target-static/release/slvsx || echo "Check complete"
          fi
          ls -lh target-static/release/slvsx*
        
      - name: Run tests
        run: cargo test
        
      - name: Test examples
        run: |
          chmod +x test-examples.sh
          ./test-examples.sh || true
          
      - name: Upload static binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: slvsx-static-${{ matrix.os }}
          path: target-static/release/slvsx*
          
      - name: Upload example SVGs
        uses: actions/upload-artifact@v4
        with:
          name: example-svgs-${{ matrix.os }}
          path: examples/*.svg