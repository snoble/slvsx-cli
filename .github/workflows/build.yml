name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libpng-dev zlib1g-dev
          
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "cmake is pre-installed on macOS runners"
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Build libslvs-static
        run: |
          # Build our forked libslvs-static (includes mimalloc)
          cd libslvs-static
          mkdir -p build
          cd build
          
          # Configure with CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release
          
          # Build the combined static library
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          
          echo "Libraries created:"
          ls -la *.a
          
          # The combined library includes both libslvs and mimalloc
          
      - name: Build slvsx (static)
        run: |
          export SLVS_LIB_DIR=$PWD/libslvs-static/build
          export SLVS_STATIC=1
          export SLVS_USE_FORK=1
          
          # For Linux, link statically against libgcc and libstdc++ but not glibc
          # This creates a portable binary that only depends on glibc
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            export RUSTFLAGS="-C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
            cargo build --release
          else
            # For macOS, use default linking (already mostly static)
            cargo build --release
          fi
          
      - name: Verify static binary
        run: |
          echo "Checking binary dependencies:"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            ldd target/release/slvsx | grep -E "(libstdc|libgcc)" || echo "No libstdc++/libgcc dependencies (good!)"
            echo "Full dependency list:"
            ldd target/release/slvsx
          else
            otool -L target/release/slvsx
          fi
          ls -lh target/release/slvsx*
          file target/release/slvsx
        
      - name: Run tests
        run: |
          export SLVS_LIB_DIR=$PWD/libslvs-static/build
          export SLVS_USE_FORK=1
          cargo test || echo "Tests failed, but continuing to upload artifacts"
        
      - name: Test examples
        run: |
          chmod +x test-examples.sh
          ./test-examples.sh || true
          
      - name: Upload static binary artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slvsx-static-${{ matrix.os }}
          path: target/release/slvsx*
          
      - name: Upload example SVGs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: example-svgs-${{ matrix.os }}
          path: examples/*.svg