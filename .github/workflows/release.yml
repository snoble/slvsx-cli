name: Release

on:
  # Disabled until real libslvs integration is complete
  # push:
  #   tags:
  #     - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (DISABLED - libslvs integration needed)'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: slvsx-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: slvsx-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: slvsx-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: slvsx-macos-aarch64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: slvsx-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: slvsx
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}

      - name: Install libslvs headers
        run: |
          # For now, use mock solver until we get proper libslvs integration
          echo "Using mock solver for CI builds"

      - name: Build static binary
        run: |
          nix-shell build.nix --run "
            export CARGO_TARGET_DIR=target
            
            # Build with mock solver for release (temporary)
            # TODO: Integrate proper libslvs build
            cargo build --release --target ${{ matrix.target }} --features mock-solver
          "

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-"* ]]; then
            7z a ../../../${{ matrix.name }}.zip slvsx.exe
          else
            tar czf ../../../${{ matrix.name }}.tar.gz slvsx
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          body: |
            ## SLVSX CLI ${{ github.event.inputs.tag || github.ref_name }}
            
            Static binaries for SolveSpace constraint solver CLI.
            
            ### Downloads
            - **Linux x86_64**: `slvsx-linux-x86_64.tar.gz`
            - **Linux ARM64**: `slvsx-linux-aarch64.tar.gz` 
            - **macOS x86_64**: `slvsx-macos-x86_64.tar.gz`
            - **macOS ARM64**: `slvsx-macos-aarch64.tar.gz`
            - **Windows x86_64**: `slvsx-windows-x86_64.exe.zip`
            
            ### Usage
            ```bash
            # Extract and run (Linux/macOS)
            tar xzf slvsx-*.tar.gz
            ./slvsx --help
            
            # Windows: extract zip and run slvsx.exe
            ```
            
            ### Features
            - JSON-based constraint specification
            - SVG/DXF/STL export
            - Gear meshing validation
            - Two-phase solving (geometry + phases)
            
            Built with Nix for reproducible, static binaries.
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}