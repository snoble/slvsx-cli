name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write  # Required for creating releases

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: slvsx-linux
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            name: slvsx-macos-x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            name: slvsx-macos-arm64
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libpng-dev zlib1g-dev
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Build libslvs-static
        run: |
          set -e  # Exit on error
          cd libslvs-static
          mkdir -p build
          cd build
          
          # Set architecture for cross-compilation on macOS
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
              echo "Building for macOS x86_64"
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64
            elif [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
              echo "Building for macOS ARM64"
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64
            fi
          else
            echo "Building for Linux x86_64"
            cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          
          # Verify library was created
          if [[ ! -f libslvs-combined.a ]]; then
            echo "ERROR: libslvs-combined.a was not created!"
            ls -la
            exit 1
          fi
          
          echo "Libraries created:"
          ls -la *.a
          
          # Verify library contains expected symbols
          echo "Checking for Slvs_Solve symbol:"
          if ! nm libslvs-combined.a | grep -q "Slvs_Solve"; then
            echo "ERROR: libslvs-combined.a doesn't contain Slvs_Solve!"
            echo "Library symbols:"
            nm libslvs-combined.a | head -50
            exit 1
          fi
          echo "✓ Found Slvs_Solve symbol"
          
          # Verify library architecture on macOS
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Library architecture:"
            lipo -info libslvs-combined.a
            
            # Verify correct architecture
            if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
              if ! lipo -info libslvs-combined.a | grep -q "x86_64"; then
                echo "ERROR: Library is not x86_64!"
                exit 1
              fi
              echo "✓ Library is x86_64"
            elif [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
              if ! lipo -info libslvs-combined.a | grep -q "arm64"; then
                echo "ERROR: Library is not arm64!"
                exit 1
              fi
              echo "✓ Library is arm64"
            fi
          fi
          
          cd ../..

      - name: Build static binary
        run: |
          set -e  # Exit on error
          export SLVS_LIB_DIR=$PWD/libslvs-static/build
          export SLVS_STATIC=1
          
          # Verify library exists before building
          if [[ ! -f "$SLVS_LIB_DIR/libslvs-combined.a" ]]; then
            echo "ERROR: libslvs-combined.a not found in $SLVS_LIB_DIR"
            ls -la "$SLVS_LIB_DIR"
            exit 1
          fi
          
          # For Linux, link statically against libgcc and libstdc++
          # Use explicit target to avoid proc-macro compilation issues with RUSTFLAGS
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            export RUSTFLAGS="-C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
          fi
          
          echo "Building with SLVS_LIB_DIR=$SLVS_LIB_DIR"
          echo "Target: ${{ matrix.target }}"
          
          # Build with explicit target for all platforms
          cargo build --release --target ${{ matrix.target }}
          
          # Verify binary was created
          BINARY_PATH="target/${{ matrix.target }}/release/slvsx"
          if [[ ! -f "$BINARY_PATH" ]]; then
            echo "ERROR: Binary not found at $BINARY_PATH"
            ls -la "target/${{ matrix.target }}/release/"
            exit 1
          fi
          echo "✓ Binary created at $BINARY_PATH"

      - name: Verify and create archive
        run: |
          set -e  # Exit on error
          
          # Binary is always in target-specific directory since we use --target
          BINARY_PATH="target/${{ matrix.target }}/release/slvsx"
          
          # Verify binary exists
          if [[ ! -f "$BINARY_PATH" ]]; then
            echo "ERROR: Binary not found at $BINARY_PATH"
            exit 1
          fi
          
          # Test binary can run (basic smoke test)
          echo "Testing binary:"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Linux: check it's statically linked
            if ldd "$BINARY_PATH" 2>&1 | grep -q "not a dynamic executable"; then
              echo "✓ Binary is statically linked"
            else
              echo "⚠ Binary may have dynamic dependencies:"
              ldd "$BINARY_PATH" || true
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: check minimal dependencies
            echo "Binary dependencies:"
            otool -L "$BINARY_PATH" | head -10
          fi
          
          # Test binary version
          "$BINARY_PATH" --version || echo "⚠ Could not get version"
          
          # Create archive with the binary
          cp "$BINARY_PATH" slvsx
          tar czf ${{ matrix.name }}.tar.gz slvsx
          rm slvsx
          
          # Verify archive was created
          if [[ ! -f "${{ matrix.name }}.tar.gz" ]]; then
            echo "ERROR: Archive not created!"
            exit 1
          fi
          
          echo "✓ Archive created: $(ls -lh ${{ matrix.name }}.tar.gz)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}.tar.gz

  smoke-test:
    name: Smoke Test ${{ matrix.name }}
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: slvsx-linux
          - os: macos-latest
            name: slvsx-macos-x86_64
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}
      
      - name: Extract and test binary
        run: |
          set -e
          tar xzf ${{ matrix.name }}.tar.gz
          
          echo "Testing binary version:"
          ./slvsx --version
          
          echo "Testing basic solve:"
          echo '{"entities":[{"type":"point","id":"p1","at":[0,0,0]},{"type":"point","id":"p2","at":[10,0,0]}],"constraints":[{"type":"fixed","of":"p1"}],"units":"mm"}' | ./slvsx solve -
          
          echo "✓ Smoke test passed for ${{ matrix.name }}"

  release:
    name: Create Release
    needs: [build, smoke-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          # This action will update existing releases if they exist
          body: |
            ## SLVSX CLI ${{ github.event.inputs.tag || github.ref_name }}
            
            Static binaries for SolveSpace constraint solver CLI.
            
            ### Installation
            
            #### One-line installer (recommended):
            ```bash
            curl -fsSL https://raw.githubusercontent.com/snoble/slvsx-cli/main/install.sh | bash
            ```
            
            #### Manual download:
            - **Linux x86_64**: `slvsx-linux.tar.gz`
            - **macOS Intel (x86_64)**: `slvsx-macos-x86_64.tar.gz`
            - **macOS Apple Silicon (ARM64)**: `slvsx-macos-arm64.tar.gz`
            
            ### Quick Test
            ```bash
            # Extract and test
            tar xzf slvsx-*.tar.gz
            ./slvsx --version
            
            # Simple example
            echo '{"entities":[{"type":"point","id":"p1","at":[0,0,0]}],"constraints":[],"units":"mm"}' | ./slvsx solve -
            ```
            
            ### Features
            - JSON-based constraint specification
            - SVG/DXF/STL export
            - MCP server mode for AI agents
            - Static binary with no dependencies
            
            See README for full documentation.
          files: |
            artifacts/**/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}