name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: slvsx-linux
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            name: slvsx-macos
            # Don't specify target for macOS - let it build native

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libpng-dev zlib1g-dev
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build libslvs-static
        run: |
          cd libslvs-static
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          echo "Libraries created:"
          ls -la *.a
          cd ../..

      - name: Build static binary
        run: |
          export SLVS_LIB_DIR=$PWD/libslvs-static/build
          export SLVS_STATIC=1
          
          # For Linux, link statically against libgcc and libstdc++ with explicit target
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            export RUSTFLAGS="-C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
            cargo build --release --target ${{ matrix.target }}
          else
            # For macOS, build native (will be ARM64 on M1 runners, x86_64 on Intel)
            cargo build --release
          fi

      - name: Create archive
        run: |
          # Find the binary location (different for --target builds)
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            BINARY_PATH="target/${{ matrix.target }}/release/slvsx"
          else
            BINARY_PATH="target/release/slvsx"
          fi
          
          # Create archive with the binary
          cp $BINARY_PATH slvsx
          tar czf ${{ matrix.name }}.tar.gz slvsx
          rm slvsx

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}.tar.gz

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          body: |
            ## SLVSX CLI ${{ github.event.inputs.tag || github.ref_name }}
            
            Static binaries for SolveSpace constraint solver CLI.
            
            ### Installation
            
            #### One-line installer (recommended):
            ```bash
            curl -fsSL https://raw.githubusercontent.com/snoble/slvsx-cli/main/install.sh | bash
            ```
            
            #### Manual download:
            - **Linux x86_64**: `slvsx-linux.tar.gz`
            - **macOS x86_64**: `slvsx-macos.tar.gz`
            - **macOS ARM64**: `slvsx-macos-arm64.tar.gz`
            
            ### Quick Test
            ```bash
            # Extract and test
            tar xzf slvsx-*.tar.gz
            ./slvsx --version
            
            # Simple example
            echo '{"entities":[{"type":"point","id":"p1","at":[0,0,0]}],"constraints":[],"units":"mm"}' | ./slvsx solve -
            ```
            
            ### Features
            - JSON-based constraint specification
            - SVG/DXF/STL export
            - MCP server mode for AI agents
            - Static binary with no dependencies
            
            See README for full documentation.
          files: |
            artifacts/**/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}