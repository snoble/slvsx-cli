name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zlib1g-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # cmake is already installed on macOS runners
          echo "Using pre-installed cmake"
          cmake --version

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache libslvs build
        uses: actions/cache@v3
        with:
          path: libslvs/SolveSpaceLib/build
          key: ${{ runner.os }}-libslvs-${{ hashFiles('libslvs/**/*.cpp', 'libslvs/**/*.h', 'libslvs/**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-libslvs-

      - name: Build libslvs
        run: |
          if [ ! -f libslvs/SolveSpaceLib/build/libslvs.a ]; then
            mkdir -p libslvs/SolveSpaceLib/build
            cd libslvs/SolveSpaceLib/build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
            cd ../../..
          fi
          echo "LIBSLVS_DIR=$PWD/libslvs/SolveSpaceLib/build" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PWD/libslvs/SolveSpaceLib/build:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$PWD/libslvs/SolveSpaceLib/build:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build CLI
        run: cargo build --release

      - name: Validate example documents
        run: |
          if [ -f testdata/simple_working.json ]; then
            ./target/release/slvsx validate testdata/simple_working.json || true
            ./target/release/slvsx solve testdata/simple_working.json || true
          fi
          # Test tutorial examples
          for example in examples/*.json; do
            if [ -f "$example" ]; then
              echo "Testing $example..."
              ./target/release/slvsx validate "$example" || true
            fi
          done

  # Disabled until test suite is working
  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive
  #
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #
  #     - name: Install system dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y cmake build-essential zlib1g-dev
  #
  #     - name: Install cargo-tarpaulin
  #       run: cargo install cargo-tarpaulin
  #
  #     - name: Cache Cargo registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-coverage-
  #           ${{ runner.os }}-cargo-
  #
  #     - name: Cache libslvs build
  #       uses: actions/cache@v3
  #       with:
  #         path: libslvs/SolveSpaceLib/build
  #         key: ${{ runner.os }}-libslvs-${{ hashFiles('libslvs/**/*.cpp', 'libslvs/**/*.h', 'libslvs/**/CMakeLists.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-libslvs-
  #
  #     - name: Build libslvs
  #       run: |
  #         mkdir -p libslvs/SolveSpaceLib/build
  #         cd libslvs/SolveSpaceLib/build
  #         cmake .. -DCMAKE_BUILD_TYPE=Release
  #         make -j$(nproc)
  #         cd ../../..
  #
  #     - name: Generate coverage report
  #       run: |
  #         export LIBSLVS_DIR=$PWD/libslvs/SolveSpaceLib/build
  #         export LD_LIBRARY_PATH=$LIBSLVS_DIR:$LD_LIBRARY_PATH
  #         cargo tarpaulin --out Html --output-dir coverage || echo 'Coverage generation failed but continuing'
  #
  #     - name: Upload coverage reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage/
  #
  # security:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #
  #     - name: Run security audit
  #       run: |
  #         cargo install cargo-audit
  #         cargo audit || echo 'Audit found issues but continuing'