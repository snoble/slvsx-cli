name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macOS disabled temporarily due to Nix installation issues
        os: [ubuntu-latest]  # , macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      # Cachix disabled until cache is configured
      # - name: Setup Cachix
      #   uses: cachix/cachix-action@v12
      #   with:
      #     name: slvsx
      #     authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      #     skipPush: ${{ secrets.CACHIX_AUTH_TOKEN == '' }}

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache libslvs build
        uses: actions/cache@v3
        with:
          path: libslvs/SolveSpaceLib/build
          key: ${{ runner.os }}-libslvs-${{ hashFiles('libslvs/**/*.cpp', 'libslvs/**/*.h', 'libslvs/**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-libslvs-

      - name: Run tests
        run: |
          nix-shell build.nix --run "
            cargo test --verbose
          "

      - name: Check formatting
        run: |
          nix-shell build.nix --run "
            cargo fmt -- --check
          "

      - name: Run clippy
        run: |
          nix-shell build.nix --run "
            cargo clippy --all-targets --all-features -- -D warnings
          "

      - name: Generate schema
        run: |
          nix-shell build.nix --run "
            cargo run --bin generate-schema
          "

      - name: Validate example documents
        run: |
          nix-shell build.nix --run "
            # Test CLI with example files
            cargo build
            if [ -f examples/testdata/simple_working.json ]; then
              ./target/debug/slvsx validate examples/testdata/simple_working.json
              ./target/debug/slvsx solve examples/testdata/simple_working.json
            elif [ -f testdata/simple_working.json ]; then
              ./target/debug/slvsx validate testdata/simple_working.json
              ./target/debug/slvsx solve testdata/simple_working.json
            else
              echo 'Warning: Could not find test data files'
            fi
          "

  # Disabled until test suite is working
  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive
  #
  #     - name: Install Nix
  #       uses: cachix/install-nix-action@v24
  #       with:
  #         nix_path: nixpkgs=channel:nixos-unstable
  #
  #     - name: Cache Cargo registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-coverage-
  #           ${{ runner.os }}-cargo-
  #
  #     - name: Cache libslvs build
  #       uses: actions/cache@v3
  #       with:
  #         path: libslvs/SolveSpaceLib/build
  #         key: ${{ runner.os }}-libslvs-${{ hashFiles('libslvs/**/*.cpp', 'libslvs/**/*.h', 'libslvs/**/CMakeLists.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-libslvs-
  #
  #     - name: Generate coverage report
  #       run: |
  #         nix-shell build.nix --run "
  #           # Generate coverage (tarpaulin is already in build.nix)
  #           cargo tarpaulin --out Html --output-dir coverage || echo 'Coverage generation failed but continuing'
  #         "
  #
  #     - name: Upload coverage reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage/
  #
  # security:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Nix
  #       uses: cachix/install-nix-action@v24
  #
  #     - name: Security audit
  #       run: |
  #         nix-shell build.nix --run "
  #           cargo audit || echo 'Audit found issues but continuing'
  #         "